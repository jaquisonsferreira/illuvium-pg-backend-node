import { Generated, Selectable, Insertable, Updateable } from 'kysely';

/**
 * Interfaces that define the database structure for Kysely
 */

/**
 * Interface for the 'assets' table
 */
export interface AssetTable {
  id: Generated<string>; // UUID generated by the database
  name: string;
  description: string;
  image_url: string; // Uses snake_case in the database
  price: number;
  tags: string[]; // Array of tags
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'users' table
 */
export interface UserTable {
  id: Generated<string>; // UUID generated by the database
  thirdweb_id: string | null; // Unique Thirdweb user identifier
  wallet_address: string | null; // User's wallet address
  nickname: string | null; // User's nickname
  avatar_url: string | null; // User's avatar URL
  experiments: string | null; // User's experiments as JSON string
  social_bluesky: string | null; // User's Bluesky social link
  social_discord: string | null; // User's Discord social link
  social_instagram: string | null; // User's Instagram social link
  social_farcaster: string | null; // User's Farcaster social link
  social_twitch: string | null; // User's Twitch social link
  social_youtube: string | null; // User's YouTube social link
  social_x: string | null; // User's X (Twitter) social link
  is_active: Generated<boolean>; // Whether the user is active
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'linked_accounts' table
 */
export interface LinkedAccountTable {
  owner: string; // UUID reference to users.id
  type: string; // Type of linked account (wallet, email, discord, etc.)
  identifier: string; // Unique identifier for the account
  email_address: string | null; // Email address for email accounts
  label: string | null; // Optional label for the account
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'blockchain_contracts' table
 */
export interface BlockchainContractTable {
  id: Generated<string>; // UUID generated by the database
  address: string; // Contract address (unique)
  contract_type: 'ERC20' | 'ERC721' | 'ERC1155'; // Type of contract
  name: string; // Contract name
  symbol: string; // Contract symbol
  decimals: number | null; // Decimals for ERC20 contracts
  network: Generated<string>; // Network (ethereum, immutable-zkevm, etc)
  is_active: Generated<boolean>; // Whether the contract is active
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'blockchain_assets' table
 */
export interface BlockchainAssetTable {
  id: Generated<string>; // UUID generated by the database
  contract_id: string; // UUID reference to blockchain_contracts.id
  token_id: string | null; // Token ID (null for ERC20)
  owner_address: string; // Current owner address
  balance: string; // Balance as string for precision (ERC20/ERC1155)
  metadata: object | null; // Token metadata as JSON
  last_updated_block: Generated<string>; // Last block where this was updated
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'asset_transactions' table
 */
export interface AssetTransactionTable {
  id: Generated<string>; // UUID generated by the database
  asset_id: string; // UUID reference to blockchain_assets.id
  transaction_hash: string; // Blockchain transaction hash
  block_number: string; // Block number as string
  event_type: 'TRANSFER' | 'MINT' | 'BURN' | 'APPROVAL' | 'APPROVAL_FOR_ALL'; // Event type
  from_address: string; // From address
  to_address: string; // To address
  value: string | null; // Value transferred (if applicable)
  timestamp: Date; // Block timestamp
  created_at: Generated<Date>;
}

/**
 * Interface for the 'asset_marketplace' table
 */
export interface AssetMarketplaceTable {
  id: Generated<string>; // UUID generated by the database
  asset_id: string; // UUID reference to blockchain_assets.id
  listing_type: 'SALE' | 'BID'; // Type of listing
  price: string; // Price as string for precision
  currency_contract: string | null; // UUID reference to blockchain_contracts.id (for currency)
  seller_address: string; // Seller address
  buyer_address: string | null; // Buyer address (for bids)
  status: 'ACTIVE' | 'COMPLETED' | 'CANCELLED' | 'EXPIRED'; // Listing status
  expires_at: Date | null; // Expiration timestamp
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'user_audit_logs' table
 */
export interface UserAuditLogTable {
  id: Generated<string>; // UUID generated by the database
  user_address: string; // User Ethereum address
  event_type: 'token.minted' | 'token.transferred' | 'token.burned'; // Type of event
  contract_address: string; // Contract address
  token_id: string; // Token ID
  network_name: string; // Blockchain network name
  block_number: number; // Block number
  transaction_hash: string; // Transaction hash
  amount: string | null; // Amount (for ERC1155)
  from_address: string | null; // From address
  to_address: string | null; // To address
  metadata: object; // Event metadata as JSON
  timestamp: Date; // Event timestamp
  created_at: Generated<Date>;
}

/**
 * Interface for the 'developer_audit_logs' table
 */
export interface DeveloperAuditLogTable {
  id: Generated<string>; // UUID generated by the database
  event_type:
    | 'contract.paused'
    | 'contract.unpaused'
    | 'contract.ownership_transferred'; // Type of event
  contract_address: string; // Contract address
  actor_address: string; // Address that performed the action
  network_name: string; // Blockchain network name
  block_number: number; // Block number
  transaction_hash: string; // Transaction hash
  previous_value: string | null; // Previous value (for state changes)
  new_value: string | null; // New value (for state changes)
  metadata: object; // Event metadata as JSON
  timestamp: Date; // Event timestamp
  created_at: Generated<Date>;
}

/**
 * Interface for the 'developer_api_keys' table
 */
export interface DeveloperApiKeyTable {
  id: Generated<string>; // UUID generated by the database
  user_id: string; // Reference to users.id
  name: string; // Human-readable name for the API key
  key_hash: string; // Hashed version of the API key
  permissions: string; // JSON string of permissions array
  is_active: Generated<boolean>; // Whether the API key is active
  expires_at: Date | null; // When the API key expires
  last_used_at: Date | null; // When the API key was last used
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'developer_nft_operations' table
 */
export interface DeveloperNftOperationTable {
  id: Generated<string>; // UUID generated by the database
  api_key_id: string; // Reference to developer_api_keys.id
  operation_type: 'MINT' | 'BURN' | 'TRANSFER' | 'UPDATE_METADATA' | 'SALE';
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';
  to_address: string; // Target wallet address
  token_id: string | null; // Token ID for operations on existing tokens
  amount: string | null; // Amount for fungible tokens or quantity
  metadata: object | null; // Operation metadata as JSON
  transaction_hash: string | null; // Blockchain transaction hash
  error_message: string | null; // Error message if operation failed
  processed_at: Date | null; // When the operation was processed
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'chat_rooms' table
 */
export interface ChatRoomTable {
  id: Generated<string>; // UUID generated by the database
  name: string;
  type: 'direct' | 'group' | 'guild';
  description: string | null;
  owner_id: string; // Reference to users.id
  is_private: Generated<boolean>;
  max_participants: number | null;
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'chat_messages' table
 */
export interface ChatMessageTable {
  id: Generated<string>; // UUID generated by the database
  room_id: string; // Reference to chat_rooms.id
  sender_id: string; // Reference to users.id
  content: string;
  type: 'text' | 'image' | 'file' | 'system';
  metadata: object | null; // Additional message data
  reply_to_id: string | null; // Reference to another message
  edited_at: Date | null;
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'chat_notifications' table
 */
export interface ChatNotificationTable {
  id: Generated<string>; // UUID generated by the database
  user_id: string; // Reference to users.id
  title: string;
  message: string;
  type: 'system' | 'chat' | 'mention';
  data: object | null; // Additional data for the notification
  is_read: Generated<boolean>; // Whether the notification has been read
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'webhook_subscriptions' table
 */
export interface WebhookSubscriptionTable {
  id: Generated<string>; // UUID generated by the database
  developer_id: string; // Reference to users.id (developer)
  svix_application_id: string; // Svix application ID
  svix_endpoint_id: string; // Svix endpoint ID
  url: string; // Webhook URL
  event_types: string; // JSON array of event types
  status: 'ACTIVE' | 'INACTIVE' | 'PAUSED';
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'seasons' table
 */
export interface SeasonTable {
  id: Generated<number>; // Serial ID
  name: string;
  chain: string;
  start_date: Date;
  end_date: Date | null;
  status: 'active' | 'completed' | 'upcoming';
  config: object; // JSON config
  total_participants: Generated<number>;
  total_shards_issued: Generated<string>; // Decimal as string
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'shard_balances' table
 */
export interface ShardBalanceTable {
  id: Generated<string>; // UUID generated by the database
  wallet_address: string;
  season_id: number; // Reference to seasons.id
  staking_shards: Generated<string>; // Decimal as string
  social_shards: Generated<string>; // Decimal as string
  developer_shards: Generated<string>; // Decimal as string
  referral_shards: Generated<string>; // Decimal as string
  total_shards: Generated<string>; // Decimal as string
  last_calculated_at: Date;
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'shard_earning_history' table
 */
export interface ShardEarningHistoryTable {
  id: Generated<string>; // UUID generated by the database
  wallet_address: string;
  season_id: number; // Reference to seasons.id
  date: Date;
  staking_shards: Generated<string>; // Decimal as string
  social_shards: Generated<string>; // Decimal as string
  developer_shards: Generated<string>; // Decimal as string
  referral_shards: Generated<string>; // Decimal as string
  daily_total: Generated<string>; // Decimal as string
  vault_breakdown: object | null; // JSON
  metadata: object | null; // JSON
  created_at: Generated<Date>;
}

/**
 * Interface for the 'referrals' table
 */
export interface ReferralTable {
  id: Generated<string>; // UUID generated by the database
  referrer_address: string;
  referee_address: string;
  season_id: number; // Reference to seasons.id
  status: Generated<'pending' | 'active' | 'expired'>;
  activation_date: Date | null;
  referee_multiplier_expires: Date | null;
  total_shards_earned: Generated<string>; // Decimal as string
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'vault_positions' table
 */
export interface VaultPositionTable {
  id: Generated<string>; // UUID generated by the database
  wallet_address: string;
  vault_address: string;
  asset_symbol: string;
  chain: string;
  balance: string; // Decimal as string
  shares: string; // Decimal as string
  usd_value: string; // Decimal as string
  lock_weeks: number; // Lock duration in weeks (4-48)
  snapshot_date: Date;
  block_number: string; // BigInt as string
  created_at: Generated<Date>;
}

/**
 * Interface for the 'developer_contributions' table
 */
export interface DeveloperContributionTable {
  id: Generated<string>; // UUID generated by the database
  wallet_address: string;
  season_id: number; // Reference to seasons.id
  action_type: string;
  action_details: object; // JSON
  shards_earned: string; // Decimal as string
  verified: Generated<boolean>;
  verified_at: Date | null;
  verified_by: string | null;
  distributed_at: Date | null;
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'price_history' table
 */
export interface PriceHistoryTable {
  id: Generated<string>; // UUID generated by the database
  token_address: string;
  chain: string;
  price_usd: string; // Decimal as string
  price_change_24h: string | null; // Decimal as string
  market_cap: string | null; // Decimal as string
  volume_24h: string | null; // Decimal as string
  timestamp: Date;
  source: string;
  granularity: string;
  created_at: Generated<Date>;
}

/**
 * Interface for the 'token_metadata' table
 */
export interface TokenMetadataTable {
  id: Generated<string>; // UUID generated by the database
  token_address: string;
  chain: string;
  symbol: string;
  name: string;
  decimals: number;
  total_supply: string | null; // Decimal as string
  circulating_supply: string | null; // Decimal as string
  coingecko_id: string | null;
  is_lp_token: Generated<boolean>;
  token0_address: string | null;
  token1_address: string | null;
  pool_address: string | null;
  dex_name: string | null;
  logo_url: string | null;
  contract_type: string | null;
  is_verified: Generated<boolean>;
  last_updated: Date;
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Main database interface, containing all tables
 */
export interface Database {
  assets: AssetTable;
  users: UserTable;
  linked_accounts: LinkedAccountTable;
  blockchain_contracts: BlockchainContractTable;
  blockchain_assets: BlockchainAssetTable;
  asset_transactions: AssetTransactionTable;
  asset_marketplace: AssetMarketplaceTable;
  user_audit_logs: UserAuditLogTable;
  developer_audit_logs: DeveloperAuditLogTable;
  developer_api_keys: DeveloperApiKeyTable;
  developer_nft_operations: DeveloperNftOperationTable;
  chat_rooms: ChatRoomTable;
  chat_messages: ChatMessageTable;
  chat_notifications: ChatNotificationTable;
  webhook_subscriptions: WebhookSubscriptionTable;
  seasons: SeasonTable;
  shard_balances: ShardBalanceTable;
  shard_earning_history: ShardEarningHistoryTable;
  referrals: ReferralTable;
  vault_positions: VaultPositionTable;
  developer_contributions: DeveloperContributionTable;
  price_history: PriceHistoryTable;
  token_metadata: TokenMetadataTable;
}

/**
 * Helper types to facilitate selection, insertion, and update operations
 */
export type Asset = Selectable<AssetTable>;
export type NewAsset = Insertable<AssetTable>;
export type AssetUpdate = Updateable<AssetTable>;

export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

export type LinkedAccount = Selectable<LinkedAccountTable>;
export type NewLinkedAccount = Insertable<LinkedAccountTable>;
export type LinkedAccountUpdate = Updateable<LinkedAccountTable>;

export type BlockchainContract = Selectable<BlockchainContractTable>;
export type NewBlockchainContract = Insertable<BlockchainContractTable>;
export type BlockchainContractUpdate = Updateable<BlockchainContractTable>;

export type BlockchainAsset = Selectable<BlockchainAssetTable>;
export type NewBlockchainAsset = Insertable<BlockchainAssetTable>;
export type BlockchainAssetUpdate = Updateable<BlockchainAssetTable>;

export type AssetTransaction = Selectable<AssetTransactionTable>;
export type NewAssetTransaction = Insertable<AssetTransactionTable>;
export type AssetTransactionUpdate = Updateable<AssetTransactionTable>;

export type AssetMarketplace = Selectable<AssetMarketplaceTable>;
export type NewAssetMarketplace = Insertable<AssetMarketplaceTable>;
export type AssetMarketplaceUpdate = Updateable<AssetMarketplaceTable>;

export type UserAuditLog = Selectable<UserAuditLogTable>;
export type NewUserAuditLog = Insertable<UserAuditLogTable>;
export type UserAuditLogUpdate = Updateable<UserAuditLogTable>;

export type DeveloperAuditLog = Selectable<DeveloperAuditLogTable>;
export type NewDeveloperAuditLog = Insertable<DeveloperAuditLogTable>;
export type DeveloperAuditLogUpdate = Updateable<DeveloperAuditLogTable>;

export type DeveloperApiKey = Selectable<DeveloperApiKeyTable>;
export type NewDeveloperApiKey = Insertable<DeveloperApiKeyTable>;
export type DeveloperApiKeyUpdate = Updateable<DeveloperApiKeyTable>;

export type DeveloperNftOperation = Selectable<DeveloperNftOperationTable>;
export type NewDeveloperNftOperation = Insertable<DeveloperNftOperationTable>;
export type DeveloperNftOperationUpdate =
  Updateable<DeveloperNftOperationTable>;

export type ChatRoom = Selectable<ChatRoomTable>;
export type NewChatRoom = Insertable<ChatRoomTable>;
export type ChatRoomUpdate = Updateable<ChatRoomTable>;

export type ChatMessage = Selectable<ChatMessageTable>;
export type NewChatMessage = Insertable<ChatMessageTable>;
export type ChatMessageUpdate = Updateable<ChatMessageTable>;

export type ChatNotification = Selectable<ChatNotificationTable>;
export type NewChatNotification = Insertable<ChatNotificationTable>;
export type ChatNotificationUpdate = Updateable<ChatNotificationTable>;

export type WebhookSubscription = Selectable<WebhookSubscriptionTable>;
export type NewWebhookSubscription = Insertable<WebhookSubscriptionTable>;
export type WebhookSubscriptionUpdate = Updateable<WebhookSubscriptionTable>;

export type Season = Selectable<SeasonTable>;
export type NewSeason = Insertable<SeasonTable>;
export type SeasonUpdate = Updateable<SeasonTable>;

export type ShardBalance = Selectable<ShardBalanceTable>;
export type NewShardBalance = Insertable<ShardBalanceTable>;
export type ShardBalanceUpdate = Updateable<ShardBalanceTable>;

export type ShardEarningHistory = Selectable<ShardEarningHistoryTable>;
export type NewShardEarningHistory = Insertable<ShardEarningHistoryTable>;
export type ShardEarningHistoryUpdate = Updateable<ShardEarningHistoryTable>;

export type Referral = Selectable<ReferralTable>;
export type NewReferral = Insertable<ReferralTable>;
export type ReferralUpdate = Updateable<ReferralTable>;

export type VaultPosition = Selectable<VaultPositionTable>;
export type NewVaultPosition = Insertable<VaultPositionTable>;
export type VaultPositionUpdate = Updateable<VaultPositionTable>;

export type DeveloperContribution = Selectable<DeveloperContributionTable>;
export type NewDeveloperContribution = Insertable<DeveloperContributionTable>;
export type DeveloperContributionUpdate =
  Updateable<DeveloperContributionTable>;

export type PriceHistory = Selectable<PriceHistoryTable>;
export type NewPriceHistory = Insertable<PriceHistoryTable>;
export type PriceHistoryUpdate = Updateable<PriceHistoryTable>;

export type TokenMetadata = Selectable<TokenMetadataTable>;
export type NewTokenMetadata = Insertable<TokenMetadataTable>;
export type TokenMetadataUpdate = Updateable<TokenMetadataTable>;

export {};
