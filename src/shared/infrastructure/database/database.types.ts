import { Generated, Selectable, Insertable, Updateable } from 'kysely';

/**
 * Interfaces that define the database structure for Kysely
 */

/**
 * Interface for the 'assets' table
 */
export interface AssetTable {
  id: Generated<string>; // UUID generated by the database
  name: string;
  description: string;
  image_url: string; // Uses snake_case in the database
  price: number;
  tags: string[]; // Array of tags
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'users' table
 */
export interface UserTable {
  id: Generated<string>; // UUID generated by the database
  privy_id: string; // Unique Privy user identifier
  nickname: string | null; // User's nickname
  avatar_url: string | null; // User's avatar URL
  experiments: string | null; // User's experiments as JSON string
  social_bluesky: string | null; // User's Bluesky social link
  social_discord: string | null; // User's Discord social link
  social_instagram: string | null; // User's Instagram social link
  social_farcaster: string | null; // User's Farcaster social link
  social_twitch: string | null; // User's Twitch social link
  social_youtube: string | null; // User's YouTube social link
  social_x: string | null; // User's X (Twitter) social link
  is_active: Generated<boolean>; // Whether the user is active
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'linked_accounts' table
 */
export interface LinkedAccountTable {
  owner: string; // UUID reference to users.id
  type: string; // Type of linked account (wallet, email, discord, etc.)
  identifier: string; // Unique identifier for the account
  email_address: string | null; // Email address for email accounts
  label: string | null; // Optional label for the account
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'blockchain_contracts' table
 */
export interface BlockchainContractTable {
  id: Generated<string>; // UUID generated by the database
  address: string; // Contract address (unique)
  contract_type: 'ERC20' | 'ERC721' | 'ERC1155'; // Type of contract
  name: string; // Contract name
  symbol: string; // Contract symbol
  decimals: number | null; // Decimals for ERC20 contracts
  network: Generated<string>; // Network (ethereum, immutable-zkevm, etc)
  is_active: Generated<boolean>; // Whether the contract is active
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'blockchain_assets' table
 */
export interface BlockchainAssetTable {
  id: Generated<string>; // UUID generated by the database
  contract_id: string; // UUID reference to blockchain_contracts.id
  token_id: string | null; // Token ID (null for ERC20)
  owner_address: string; // Current owner address
  balance: string; // Balance as string for precision (ERC20/ERC1155)
  metadata: object | null; // Token metadata as JSON
  last_updated_block: Generated<string>; // Last block where this was updated
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'asset_transactions' table
 */
export interface AssetTransactionTable {
  id: Generated<string>; // UUID generated by the database
  asset_id: string; // UUID reference to blockchain_assets.id
  transaction_hash: string; // Blockchain transaction hash
  block_number: string; // Block number as string
  event_type: 'TRANSFER' | 'MINT' | 'BURN' | 'APPROVAL' | 'APPROVAL_FOR_ALL'; // Event type
  from_address: string; // From address
  to_address: string; // To address
  value: string | null; // Value transferred (if applicable)
  timestamp: Date; // Block timestamp
  created_at: Generated<Date>;
}

/**
 * Interface for the 'asset_marketplace' table
 */
export interface AssetMarketplaceTable {
  id: Generated<string>; // UUID generated by the database
  asset_id: string; // UUID reference to blockchain_assets.id
  listing_type: 'SALE' | 'BID'; // Type of listing
  price: string; // Price as string for precision
  currency_contract: string | null; // UUID reference to blockchain_contracts.id (for currency)
  seller_address: string; // Seller address
  buyer_address: string | null; // Buyer address (for bids)
  status: 'ACTIVE' | 'COMPLETED' | 'CANCELLED' | 'EXPIRED'; // Listing status
  expires_at: Date | null; // Expiration timestamp
  created_at: Generated<Date>;
  updated_at: Generated<Date>;
}

/**
 * Interface for the 'user_audit_logs' table
 */
export interface UserAuditLogTable {
  id: Generated<string>; // UUID generated by the database
  user_address: string; // User Ethereum address
  event_type: 'token.minted' | 'token.transferred' | 'token.burned'; // Type of event
  contract_address: string; // Contract address
  token_id: string; // Token ID
  network_name: string; // Blockchain network name
  block_number: number; // Block number
  transaction_hash: string; // Transaction hash
  amount: string | null; // Amount (for ERC1155)
  from_address: string | null; // From address
  to_address: string | null; // To address
  metadata: object; // Event metadata as JSON
  timestamp: Date; // Event timestamp
  created_at: Generated<Date>;
}

/**
 * Interface for the 'developer_audit_logs' table
 */
export interface DeveloperAuditLogTable {
  id: Generated<string>; // UUID generated by the database
  event_type:
    | 'contract.paused'
    | 'contract.unpaused'
    | 'contract.ownership_transferred'; // Type of event
  contract_address: string; // Contract address
  actor_address: string; // Address that performed the action
  network_name: string; // Blockchain network name
  block_number: number; // Block number
  transaction_hash: string; // Transaction hash
  previous_value: string | null; // Previous value (for state changes)
  new_value: string | null; // New value (for state changes)
  metadata: object; // Event metadata as JSON
  timestamp: Date; // Event timestamp
  created_at: Generated<Date>;
}

/**
 * Main database interface, containing all tables
 */
export interface Database {
  assets: AssetTable;
  users: UserTable;
  linked_accounts: LinkedAccountTable;
  blockchain_contracts: BlockchainContractTable;
  blockchain_assets: BlockchainAssetTable;
  asset_transactions: AssetTransactionTable;
  asset_marketplace: AssetMarketplaceTable;
  user_audit_logs: UserAuditLogTable;
  developer_audit_logs: DeveloperAuditLogTable;
}

/**
 * Helper types to facilitate selection, insertion, and update operations
 */
export type Asset = Selectable<AssetTable>;
export type NewAsset = Insertable<AssetTable>;
export type AssetUpdate = Updateable<AssetTable>;

export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

export type LinkedAccount = Selectable<LinkedAccountTable>;
export type NewLinkedAccount = Insertable<LinkedAccountTable>;
export type LinkedAccountUpdate = Updateable<LinkedAccountTable>;

export type BlockchainContract = Selectable<BlockchainContractTable>;
export type NewBlockchainContract = Insertable<BlockchainContractTable>;
export type BlockchainContractUpdate = Updateable<BlockchainContractTable>;

export type BlockchainAsset = Selectable<BlockchainAssetTable>;
export type NewBlockchainAsset = Insertable<BlockchainAssetTable>;
export type BlockchainAssetUpdate = Updateable<BlockchainAssetTable>;

export type AssetTransaction = Selectable<AssetTransactionTable>;
export type NewAssetTransaction = Insertable<AssetTransactionTable>;
export type AssetTransactionUpdate = Updateable<AssetTransactionTable>;

export type AssetMarketplace = Selectable<AssetMarketplaceTable>;
export type NewAssetMarketplace = Insertable<AssetMarketplaceTable>;
export type AssetMarketplaceUpdate = Updateable<AssetMarketplaceTable>;

export type UserAuditLog = Selectable<UserAuditLogTable>;
export type NewUserAuditLog = Insertable<UserAuditLogTable>;
export type UserAuditLogUpdate = Updateable<UserAuditLogTable>;

export type DeveloperAuditLog = Selectable<DeveloperAuditLogTable>;
export type NewDeveloperAuditLog = Insertable<DeveloperAuditLogTable>;
export type DeveloperAuditLogUpdate = Updateable<DeveloperAuditLogTable>;
